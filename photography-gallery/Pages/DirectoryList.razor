@page "/"
@page "/{requestedDirectory}"
@code {
    [Parameter]
    public string RequestedDirectory { get; set; }
}
@using photography_gallery.Services;
@using Microsoft.AspNetCore.Components.Web;
@using photography_gallery.Models;
@using StackExchange.Redis;
@inject ImageListService ListService
@inject IJSRuntime JSRuntime;
@implements IDisposable
@inject NavigationManager NavigationManager

@{
    ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("192.168.1.179:6379,allowAdmin=true");
    IDatabase redisDatabase = redis.GetDatabase(9);
}

<div class="text-center">
    <div class="card-columns">
        @foreach (ListEntry directory in ListService.GetDirectoryList("/" + System.Net.WebUtility.UrlDecode(RequestedDirectory)))
        {
            <a class="card btn btn-outline-primary shadow-sm" style="cursor:pointer" href="@directory.RoutablePath">
                <div class="card-body">
                    <h5>@directory.DisplayName</h5>
                </div>
            </a>
        }
    </div>
    <div class="card-columns">
        @foreach (ListEntry directory in ListService.GetFileList("/" + System.Net.WebUtility.UrlDecode(RequestedDirectory)))
        {
            <img src="@directory.ThumbnailPath" @onclick="(e => SelectImage(directory))" class="card shadow-sm w-100" style="cursor:pointer; width:100%" data-toggle="modal" data-target="#imagePreviewModal" />
        }
    </div>
</div>

<div class="modal fade" id="imagePreviewModal" tabindex="-1" role="dialog" aria-labelledby="imagePreviewTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imagePreviewTitle">
                    @if (selectedImage != null)
                    {@selectedImage.DisplayName}
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                </div>
            <div class="modal-body">
                @if (selectedImage != null)
                {
                    <img class="card-img" src="@selectedImage.PreviewPath" />
                }
            </div>
            <div class="modal-footer">
                @if (selectedImage != null)
                {
                <div class="flex-fill">
                    <button class="btn btn-outline-secondary shadow-sm" data-toggle="collapse" data-target="#metadata">View metadata</button>

                    <a id="download-link" class="btn btn-outline-secondary shadow-sm" href="@selectedImage.RelativePath" target="_blank" download>download full-size image</a>

                    <div id="metadata" class="collapse">
                        <table class="table">
                            <tr>
                                <th scope="row">Camera</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "Model")</td>
                            </tr>
                            <tr>
                                <th scope="row">Lens</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "LensModel")</td>
                            </tr>
                            <tr>
                                <th scope="row">F-stop</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "FNumber")</td>
                            </tr>
                            <tr>
                                <th scope="row">Focal length</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "FocalLength")</td>
                            </tr>
                            <tr>
                                <th scope="row">Shutter speed</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "ExposureTime")</td>
                            </tr>
                        </table>
                    </div>
                </div>
                    }
                </div>
                </div>
    </div>
</div>
@{
    string currentDirectory = (RequestedDirectory == "") ? "/" : "/" + RequestedDirectory;
}

@code {
    ListEntry selectedImage;

    void SelectImage(ListEntry clickedImage)
    {
        selectedImage = clickedImage;
    }

    // Close modal on navigation event
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        JSRuntime.InvokeAsync<string>("closeModal");
    }
    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }
}