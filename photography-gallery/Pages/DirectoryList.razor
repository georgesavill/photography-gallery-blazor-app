@page "/"
@page "/{requestedDirectory}"
@code {
    [Parameter]
    public string RequestedDirectory { get; set; }
}
@using System;
@using System.IO;
@using System.Collections;
@using photography_gallery.Services;
@using Microsoft.AspNetCore.Components.Web;
@using photography_gallery.Models;
@using StackExchange.Redis;
@inject ImageListService ListService
@inject IJSRuntime JSRuntime;
@implements IDisposable
@inject NavigationManager NavigationManager

@{
    if (!ListService.DirectoryExists(RequestedDirectory))
    {
        NavigationManager.NavigateTo("/");
    }
    ConfigurationOptions redisOptions = new ConfigurationOptions
    {
        AbortOnConnectFail = false,
        EndPoints = { "192.168.1.179:6379" }
    };
    ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(redisOptions);
    IDatabase redisDatabase = redis.GetDatabase(9);
}

<div class="list-container">
    <div class="text-list list">
        @foreach (ListEntry directory in ListService.GetDirectoryList("/" + System.Net.WebUtility.UrlDecode(RequestedDirectory)))
        {
            <a class="text-card" href="@directory.RoutablePath">
                <h4>@directory.DisplayName</h4>
            </a>
        }
    </div>
    <div class="list">
        @foreach (ListEntry directory in ListService.GetFileList("/" + System.Net.WebUtility.UrlDecode(RequestedDirectory)))
        {
            <img class="img-card" srcset="@directory.SmallImagePath 1x, @directory.MediumImagePath 2x"  src="@directory.SmallImagePath" width="400" height="@(400 * float.Parse(redisDatabase.HashGet(directory.DisplayName, "AspectRatio").ToString()))" @onclick="(e => OpenModal(directory))" />
        }
    </div>
</div>

<div id="imagePreviewModal" class="modal">
    <div class="modal-content">
        <div class="modal-body">
            <div id="imagePreviewModalCloseBtn" @onclick="CloseModal"><div class="model-close-btn">✕</div></div>
            @if (selectedImage != null)
            {
                <img srcset="@selectedImage.MediumImagePath 1x, @selectedImage.LargeImagePath 2x" src="@selectedImage.MediumImagePath" />
            }
        </div>
        @*<div class="modal-footer">
            @if (selectedImage != null)
            {
                <div class="flex-fill">
                    <div id="metadata-btn" class="btn">toggle metadata</div>

                    <a id="download-btn" class="btn" href="@selectedImage.RelativePath" target="_blank" download>download full-size image</a>

                    <div id="metadata" class="collapsable">
                        <table class="table">
                            <tr>
                                <th scope="row">Camera</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "Model")</td>
                            </tr>
                            <tr>
                                <th scope="row">Lens</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "LensModel")</td>
                            </tr>
                            <tr>
                                <th scope="row">F-stop</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "FNumber")</td>
                            </tr>
                            <tr>
                                <th scope="row">Focal length</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "FocalLength")</td>
                            </tr>
                            <tr>
                                <th scope="row">Shutter speed</th>
                                <td>@redisDatabase.HashGet(selectedImage.DisplayName, "ExposureTime")</td>
                            </tr>
                        </table>
                    </div>
                </div>
            }
        </div>*@
    </div>
</div>
@{
    string currentDirectory = (RequestedDirectory == "") ? "/" : "/" + RequestedDirectory;
}

@code {
    ListEntry selectedImage;

    void OpenModal(ListEntry clickedImage)
    {
        selectedImage = clickedImage;
        JSRuntime.InvokeAsync<string>("openModal");
    }
    void CloseModal()
    {
        selectedImage = null;
        JSRuntime.InvokeAsync<string>("closeModal");
    }

    //Close modal on navigation event
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        CloseModal();
    }
    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }
}